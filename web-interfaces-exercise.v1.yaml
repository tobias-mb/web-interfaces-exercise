openapi: 3.0.0
info:
  title: web-interfaces-exercise
  version: '1.0'
  contact:
    name: Tobias MÃ¼hlbauer
    email: tobias.mb@gmx.de
  description: Documentation for the graded exercise in the web interfaces course
servers:
  - url: 'https://webinterfaces26071990.herokuapp.com'
paths:
  /users:
    post:
      summary: Create New User
      operationId: post-users
      responses:
        '201':
          description: Created new user. Returns the id of the new user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    example: 2
                    type: integer
              examples:
                example-1:
                  value:
                    id: 2
        '400':
          description: Missing required information or invalid email address.
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
              required:
                - username
                - password
                - email
            examples:
              example-1:
                value:
                  username: tester1234
                  password: 1234foobar
                  email: notreal@email.com
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user. Needs email verification.
    parameters: []
    get:
      summary: Search For User
      operationId: get-users
      responses:
        '200':
          description: returns matching userinfo
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
              examples:
                example-1:
                  value:
                    id: 2
                    username: kunigunde
                    enail: something@mailer.com
        '400':
          description: Missing userinfo
        '404':
          description: No matching user found
      description: 'Search for a user by id, username or email'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  example: 2
                  type: integer
                username:
                  type: string
                  example: kunigunde
                enail:
                  type: string
                  example: something@mailer.com
            examples:
              example-1:
                value:
                  id: 2
                  username: kunigunde
                  enail: something@mailer.com
        description: >-
          identify the user. Needs at least one of id, username or email in the
          request
    put:
      summary: Change Userinfo
      operationId: put-users
      responses:
        '200':
          description: 'information updated. returns {"result" : "ok"}'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: ok
              examples:
                example-1:
                  value:
                    result: ok
        '204':
          description: >-
            Nothing to change (no password or email in the PUT request). returns
            {"result" : "ok"}
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: ok
              examples:
                example-1:
                  value:
                    result: ok
        '400':
          description: invalid email address
        '401':
          description: Wrong or missing username + password
        '409':
          description: email address already in use
      description: Change information of the user in auth.
      security:
        - Basic Auth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: somePW1234
                email:
                  type: string
                  example: notreal@email.com
            examples:
              example-1:
                value:
                  password: somePW1234
                  email: notreal@email.com
        description: The information to change.
  '/users/validation/newUser/{username}/{validationKey}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
      - schema:
          type: string
        name: validationKey
        in: path
        required: true
    get:
      summary: Email Verification
      tags: []
      responses:
        '200':
          description: Displays a "success" html
          content:
            text/html:
              schema:
                type: object
                properties: {}
        '404':
          description: Wrong username or verification code
      operationId: get-validation-email
      description: |-
        This route is used to verify the email address of a new user.
        A matching link is sent in the registration email.
  /users/restore:
    post:
      summary: Password Reset
      operationId: post-users-restore
      responses:
        '201':
          description: 'Password reset request created. Returns {"result" : "ok"}'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: ok
              examples:
                example-1:
                  value:
                    result: ok
        '400':
          description: Missing or invalid email
        '404':
          description: email is not in use
      description: Password reset with email. Needs email verification.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: notreal@email.com
              required:
                - email
            examples:
              example-1:
                value:
                  email: notreal@email.com
        description: 'The email address of the user, who wants to reset the pw'
  '/users/validation/restorePw/{username}/{validationKey}':
    get:
      summary: Password Reset Confirmation
      tags: []
      responses:
        '200':
          description: Displays a "success" html
          content:
            text/html:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: {}
        '404':
          description: Wrong username or verification code.
      operationId: get-validation-restorePw
      description: |-
        Email verification for a password reset.
        A matching link is sent in the confirmation email.
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
      - schema:
          type: string
        name: validationKey
        in: path
        required: true
  /login:
    post:
      summary: Log In
      operationId: post-login
      responses:
        '200':
          description: log in successful. Returns the id of the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
              examples:
                example-1:
                  value:
                    id: 71
        '401':
          description: Wrong or missing username + password
      description: Checks if username + password can get verification / is in the database.
      security:
        - Basic Auth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            examples:
              example-1:
                value:
                  username: banana
                  password: apple
        description: 'The username + password of the user, who wants to log in.'
  /products:
    get:
      summary: Search Items
      tags: []
      responses:
        '200':
          description: returns all matching items
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
              examples:
                example-1:
                  value:
                    products:
                      - id: 1
                        title: title
                        description: desc
                        category: tag
                        location: city
                        images:
                          - pic1.jpg
                          - pic2.jpg
                          - pic3.jpg
                        price: 14.76
                        posting_date: '2019-08-24'
                        delivery: UPS
                        seller: 7
                        seller_name: his_name
                        seller_email: an@email.com
        '400':
          description: invalid search params
      operationId: get-products
      description: >-
        Search items by req params.

        No params = get all.

        Possible query params are id, title, description, category, location,
        images, price, posting_date, delivery, seller. A combination is also
        possible (by using '&').

        Price is looking for max price, posting_date is a "newer than" search.

        Seller is by id (use GET /users route to find the id)
      parameters:
        - schema:
            type: string
            example: location=oulu&title=boat
          in: query
          name: param
          description: param can be any of the ones mentioned in description
    parameters: []
    post:
      summary: Create New Item
      operationId: post-products
      responses:
        '201':
          description: New item created. Returns the id of the new item.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    example: 2
                    type: integer
              examples:
                example-1:
                  value:
                    id: 2
        '400':
          description: missing title
        '401':
          description: Not a registered user.
      description: |-
        Post a new Item to the server. Needs registered user.
        Note that this is a multiform with multiple images.
      security:
        - Basic Auth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: title
                description:
                  type: string
                  example: desc
                category:
                  type: string
                  example: tag
                location:
                  type: string
                  example: city
                price:
                  type: number
                  description: 2 decimals precision
                  example: 12.34
                delivery:
                  type: string
                  example: UPS
                images:
                  type: string
                  description: 'multi form: multiple images'
                  format: binary
              required:
                - title
            examples:
              example-1:
                value:
                  title: title
                  description: desc
                  category: tag
                  location: city
                  price: 12.34
                  delivery: UPS
                  images: string
        description: Info about the new Item. Only title is mandatory.
  '/products/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: Change Item
      operationId: put-products-id
      responses:
        '200':
          description: 'Item changed. returns {"result" : "ok"}'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: ok
        '201':
          description: 'Item changed and new images uploaded. returns {"result" : "ok"}'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: ok
        '204':
          description: 'Nothing to change (request was empty). returns {"result" : "ok"}'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: ok
        '401':
          description: Not a registered user
        '403':
          description: The user is not the owner of the item.
        '404':
          description: No item with matching id found
      description: >-
        Change an existing Item. All information is optional. Only need to
        include what you want to change. Only owner can change an item.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: new title
                description:
                  type: string
                  example: new desc
                category:
                  type: string
                  example: 'new, tags'
                location:
                  type: string
                  example: 'different, city'
                price:
                  type: number
                  example: 23.45
                  description: 2 decimals precision
                delivery:
                  type: string
                  example: Santa's Sleigh
                images:
                  type: string
                  format: binary
            examples:
              example-1:
                value:
                  title: new title
                  description: new desc
                  category: 'new, tags'
                  location: 'different, city'
                  price: 23.45
                  delivery: Santa's Sleigh
                  images: string
        description: The info to change. Note that it is multiform (images).
      security:
        - Basic Auth: []
    delete:
      summary: Delete Item
      operationId: delete-products-id
      responses:
        '204':
          description: 'Item deleted. returns {"result" : "ok"}'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: ok
        '401':
          description: Not a registered user
        '403':
          description: User is not the owner of the item.
        '404':
          description: No item with matching id found
      description: Delete an item by id. Only the owner can delete an item.
      security:
        - Basic Auth: []
components:
  schemas:
    Item:
      title: Item
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        category:
          type: string
        location:
          type: string
        images:
          type: array
          description: image URLs
          items:
            type: string
        price:
          type: number
          description: saves 2 decimals
        posting_date:
          type: string
          format: date
          description: date string
        delivery:
          type: string
        seller:
          type: number
          description: seller id
        seller_name:
          type: string
        seller_email:
          type: string
      x-examples:
        example-1:
          id: 17
          title: A Title
          description: A few words to describe the item.
          category: 'tag1, tag2'
          location: 'Helsinki, Finland'
          images:
            - dog.jpg
            - cat.jpg
            - banana.jpg
          price: 16.43
          posting_date: '2019-08-24'
          delivery: 'pick up, UPS'
          seller: 4
          seller_name: MyAccount
          seller_email: notreal@email.com
  securitySchemes:
    Basic Auth:
      type: http
      scheme: basic
      description: Basic Schema Auth with username + password
